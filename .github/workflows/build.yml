name: build

on:
  push:
    branches:
      - 'main'
      - 'releases/v*'
    tags:
      - '*'

jobs:
  create-container:
    strategy:
      matrix:
        go-version: 
          - 1.18.x
        wireguard-version:
          - 0.0.20211016
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go-version }}
      - name: 'Get Previous tag'
        id: previoustag
        run: echo "::set-output name=tag::$(git describe --tags --abbrev=0 --candidates=1)"
      - name: Set vars for commit id
        id: vars
        run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
        # Stable release is a tag `X.Y.Z` without any metadata
      - name: Check stable release
        uses: actions-ecosystem/action-regex-match@v2
        id: stablerelease
        with:
          text: ${{ github.ref }}
          regex: ^refs\/tags\/(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)$
      - name: Prepare target directories
        id: bindir
        run: mkdir -p ./target/x86_64 ./target/arm64
      - name: Crosscompile syntropy-agent for all architectures
        id: agentbuild
        run: |
          make deps
          GOARCH=amd64 make app && cp syntropy_agent ./target/x86_64 && make clean
          GOARCH=arm64 make app && cp syntropy_agent ./target/arm64 && make clean
      # GitHub action limit checkout to github subrepos only
      # Thus we are using wireguard-go mirror in github
      - name: Checkout wireguard-go
        uses: actions/checkout@v2
        with:
          repository: WireGuard/wireguard-go
          ref: ${{matrix.wireguard-version}}
          path: wireguard-go
          fetch-depth: 0
      - name: Crosscompile wireguard-go for all architectures
        id: wireguard
        working-directory: wireguard-go
        run: |
          GOARCH=amd64 CGO_ENABLED=0 make && cp wireguard-go ./../target/x86_64 && make clean
          GOARCH=arm64 CGO_ENABLED=0 make && cp wireguard-go ./../target/arm64 && make clean
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_PASS }}
      -
        name: SANDBOX Build and push
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: docker/build-push-action@v2
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          file: ./Dockerfile
          push: true
          tags: |
            syntropynet/agent:alpha
      - name: SANDBOX agent reload
        if: ${{ github.ref == 'refs/heads/main' }}
        run: |
          curl -X POST \
               --fail \
               -F token=${{ secrets.RELOAD_TRIGGER_TOKEN }} \
               -F "ref=main" \
               -F "variables[DEPLOY]=sandbox-platform-agent" \
               ${{ secrets.RELOAD_TRIGGER_URL }}
      -
        name: DEVEL Build and push
        if: contains(github.ref, 'beta')
        uses: docker/build-push-action@v2
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          file: ./Dockerfile
          push: true
          tags: |
            syntropynet/agent:beta
            syntropynet/agent:${{ steps.previoustag.outputs.tag }}
      - name: DEVEL agent reload
        if: contains(github.ref, 'beta')
        run: |
          curl -X POST \
               --fail \
               -F token=${{ secrets.RELOAD_TRIGGER_TOKEN }} \
               -F "ref=main" \
               -F "variables[DEPLOY]=devel-platform-agent" \
               ${{ secrets.RELOAD_TRIGGER_URL }}
      -
        name: PROD Build and push
        if: ${{ steps.stablerelease.outputs.match != '' }}
        uses: docker/build-push-action@v2
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          file: ./Dockerfile
          push: true
          tags: |
            syntropynet/agent:stable
            syntropynet/agent:latest
            syntropynet/agent:${{ steps.previoustag.outputs.tag }}
            
